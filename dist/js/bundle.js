/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) });\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: true });\n  defineProperty(\n    GeneratorFunctionPrototype,\n    \"constructor\",\n    { value: GeneratorFunction, configurable: true }\n  );\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", { value: enqueue });\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next mehtod, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable || iterable === \"\") {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    throw new TypeError(typeof iterable + \" is not iterable\");\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n\n\n//# sourceURL=webpack://Template/./node_modules/regenerator-runtime/runtime.js?");

/***/ }),

/***/ "./src/js/bundle.js":
/*!**************************!*\
  !*** ./src/js/bundle.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regenerator-runtime/runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__);\n// import './parts/nav';\r\n// import './parts/acton-form-submit';\r\n\r\n\r\n\r\n// !Don't remove. Ensures Firefox has the same drag and drop support as Sarafi and Chromium based browsers.\r\ndocument.addEventListener(\"dragover\", function (e) {\r\n  e.preventDefault();\r\n});\r\n\r\ndocument.addEventListener(\"drop\", function (e) {\r\n  convertImages();\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n  const webpImages = [];\r\n  const downloadButtonSingle = document.querySelector(\"#downloadButtonSingle\");\r\n  const downloadButtonMultiple = document.querySelector(\r\n    \"#downloadButtonMultiple\"\r\n  );\r\n  const inputElement = document.getElementById(\"imageUploadButton\");\r\n  let imagesProcessed = 0;\r\n  const imageElements = []; // *Array to store original and converted image elements\r\n  let isImageProcessing = false;\r\n  const PopupCard = document.getElementById(\"popup-card\");\r\n  const closeButton = document.querySelector(\".close-button\");\r\n\r\n  function resetProcessingState() {\r\n    webpImages.length = 0;\r\n    imageElements.length = 0;\r\n    isImageProcessing = false;\r\n\r\n    // Clear existing images and data in the streamline container\r\n    const streamlineContainer = document.querySelector(\"#streamline\");\r\n    streamlineContainer.innerHTML = \"\";\r\n\r\n    // Hide download buttons\r\n    downloadButtonSingle.style.display = \"none\";\r\n    downloadButtonMultiple.style.display = \"none\";\r\n  }\r\n\r\n  const convertImages = function (event) {\r\n    resetProcessingState();\r\n\r\n    if (isImageProcessing) {\r\n      console.log(\"Ongoing image processing. Please wait...\");\r\n      return;\r\n    }\r\n\r\n    if (event.target.files.length > 0) {\r\n      // Reset webpImages array\r\n      webpImages.length = 0;\r\n      imagesProcessed = 0;\r\n      isImageProcessing = true;\r\n\r\n      // Slider Value\r\n      let sliderValue = parseFloat(document.getElementById(\"slider\").value); // Default value for the slider\r\n      const slider = document.getElementById(\"slider\");\r\n      const sliderValueDisplay = document.getElementById(\"sliderValue\");\r\n      slider.addEventListener(\"input\", function () {\r\n        sliderValue = parseFloat(this.value);\r\n        sliderValueDisplay.textContent = sliderValue;\r\n      });\r\n\r\n      for (let i = 0; i < event.target.files.length; i++) {\r\n        let file = event.target.files[i];\r\n\r\n        // Create elements for file sizes and converted image data\r\n        let originalDataSize = document.createElement(\"span\");\r\n        let convertedImage = document.createElement(\"img\");\r\n        convertedImage.classList.add(\"webp-image\");\r\n        let convertedDataSize = document.createElement(\"span\");\r\n\r\n        // Create image element to store the original image\r\n        let originalImage = new Image();\r\n        originalImage.src = URL.createObjectURL(file);\r\n\r\n        // Store image and data span elements in the object with the same identifiers\r\n        imageElements[i] = {\r\n          originalDataSize,\r\n          convertedImage,\r\n          convertedDataSize,\r\n          originalImage, // Store the original image element\r\n          originalImageURL: null,\r\n          webpImageURL: null, // This will be updated once we have the image processed.\r\n          imageIndex: i,\r\n        };\r\n        console.log(\r\n          \"Original Data Size for image\",\r\n          i,\r\n          \":\",\r\n          imageElements[i].originalDataSize\r\n        );\r\n\r\n        // Process image and update elements\r\n        processImage(\r\n          event,\r\n          file,\r\n          originalDataSize,\r\n          convertedImage,\r\n          convertedDataSize,\r\n          sliderValue,\r\n          document.getElementById(\"popup-card\"),\r\n          i\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // !Process Image\r\n  function processImage(\r\n    event,\r\n    file,\r\n    originalDataSize,\r\n    convertedImage,\r\n    convertedDataSize,\r\n    sliderValue,\r\n    popup,\r\n    imageIndex\r\n  ) {\r\n    const startTime = performance.now();\r\n    console.log(\"processing image: \", file);\r\n    let canvas = document.createElement(\"canvas\");\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    let originalImage = new Image();\r\n    originalImage.src = URL.createObjectURL(file);\r\n\r\n    originalImage.onload = function () {\r\n      canvas.width = originalImage.width;\r\n      canvas.height = originalImage.height;\r\n      ctx.drawImage(originalImage, 0, 0);\r\n\r\n      // *Convert canvas to WebP\r\n      canvas.toBlob(\r\n        function (blob) {\r\n          //Calculate the file size of the WebP Image\r\n          const fileSizeKB = blob.size / 1024;\r\n\r\n          const reader = new FileReader();\r\n          reader.onloadend = function () {\r\n            const webpImage = reader.result;\r\n\r\n            convertedImage.dataset.index = imageIndex;\r\n\r\n            imageElements[imageIndex].originalImageURL = originalImage;\r\n            imageElements[imageIndex].webpImageURL = webpImage; //Store the converted WebP image URL here\r\n\r\n            // *Update file size elements and converted image data\r\n            originalDataSize.innerText =\r\n              \"Original File Size: \" + file.size + \" bytes\";\r\n            convertedDataSize.innerText =\r\n              \"Converted File Size: \" + fileSizeKB.toFixed(2) + \" KB\";\r\n            convertedImage.src = webpImage;\r\n\r\n            // *Store WebP image data with original filename\r\n            const originalFilename = file.name;\r\n            const webpFilename = getWebpFilename(originalFilename);\r\n            webpImages.push({\r\n              name: originalFilename,\r\n              data: webpImage,\r\n              originalBlob: file, //Store the original image blob for render purposes\r\n            });\r\n            imageElements[imageIndex].originalFilename = originalFilename;\r\n            // imagesProcessed++; // *get the image index from the imagesProcessed counter\r\n            imagesProcessed++;\r\n\r\n            convertedImage.dataset.index = imageIndex;\r\n            imageElements[imageIndex].originalImageURL = originalImage;\r\n            imageElements[imageIndex].webpImageURL = webpImage;\r\n\r\n            // *Store WebP image data\r\n            webpImages[imageIndex] = {\r\n              name: originalFilename,\r\n              data: webpImage,\r\n              filename: webpFilename,\r\n              originalBlob: file,\r\n            };\r\n            console.log(webpImages);\r\n\r\n            // *Check to ensure all images have been uploaded and converted\r\n            if (imagesProcessed === event.target.files.length) {\r\n              renderWebpImages();\r\n              console.log(renderWebpImages());\r\n\r\n              if (imagesProcessed === 1) {\r\n                console.log(\"Number of files uploaded:\", imagesProcessed);\r\n                downloadButtonSingle.style.display = \"block\";\r\n                downloadButtonMultiple.style.display = \"none\";\r\n              } else {\r\n                downloadButtonSingle.style.display = \"none\";\r\n                downloadButtonMultiple.style.display = \"block\";\r\n              }\r\n            }\r\n            const endTime = performance.now();\r\n            const processingTime = endTime - startTime;\r\n            console.log(\"Processing time:\", processingTime);\r\n          };\r\n          reader.readAsDataURL(blob);\r\n        },\r\n        \"image/webp\",\r\n        sliderValue\r\n      );\r\n    };\r\n  }\r\n\r\n  // *Update the slider value display\r\n  const slider = document.getElementById(\"slider\");\r\n  const sliderValueDisplay = document.getElementById(\"sliderValue\");\r\n  slider.addEventListener(\"input\", function () {\r\n    sliderValueDisplay.textContent = this.value;\r\n  });\r\n\r\n  function getWebpFilename(originalFilename) {\r\n    const extensionIndex = originalFilename.lastIndexOf(\".\");\r\n    const filename = originalFilename.substring(0, extensionIndex);\r\n    return filename + \".webp\";\r\n  }\r\n\r\n  // !Render Webp images and data\r\n  function renderWebpImages() {\r\n    const matchedArray = webpImages.map((webpImage, index) => ({\r\n      ...webpImage,\r\n      ...imageElements[index],\r\n    }));\r\n    console.log(matchedArray);\r\n\r\n    // *Clear the existing images\r\n    const streamlineContainer = document.querySelector(\"#streamline\");\r\n    streamlineContainer.innerHTML = \"\";\r\n    console.log(\"is running\");\r\n\r\n    // *Render WebP images in order\r\n    for (let i = 0; i < webpImages.length; i++) {\r\n      const {\r\n        name,\r\n        data,\r\n        filename,\r\n        originalImageURL,\r\n        originalBlob,\r\n        originalDataSize,\r\n        convertedImage,\r\n        convertedDataSize,\r\n      } = matchedArray[i];\r\n\r\n      if (convertedImage && originalDataSize && convertedDataSize) {\r\n        const startTimeRendering = performance.now();\r\n        console.log(\"rendering webp: \", filename);\r\n\r\n        // *Create a div to hold each image's content\r\n        const fileWrapper = document.createElement(\"div\");\r\n        fileWrapper.classList.add(\"file-wrapper\");\r\n\r\n        // *Show file name\r\n        const fileNameElement = document.createElement(\"p\");\r\n        const fileNameText = document.createTextNode(\"File Name:\" + \" \");\r\n        // *const brElement = document.createElement('br');\r\n        const filenameText = document.createTextNode(filename);\r\n\r\n        fileNameElement.appendChild(fileNameText);\r\n        // *fileNameElement.appendChild(brElement);\r\n        fileNameElement.appendChild(filenameText);\r\n\r\n        fileNameElement.classList.add(\"filename-wrapper\");\r\n        fileWrapper.appendChild(fileNameElement);\r\n\r\n        const fileWrapperRow = document.createElement(\"div\");\r\n        fileWrapperRow.classList.add(\"file-wrapper-row\");\r\n\r\n        // *Show WebP image\r\n        convertedImage.src = data;\r\n        convertedImage.alt = name; // *Set the alt attribute to the original filename\r\n        fileWrapperRow.appendChild(convertedImage);\r\n\r\n        // *Show file sizes\r\n        const originalFileSize = document.createElement(\"p\");\r\n        originalFileSize.innerText = originalDataSize.innerText;\r\n        originalFileSize.classList.add(\"data-wrapper\");\r\n        fileWrapperRow.appendChild(originalFileSize);\r\n\r\n        const convertedFileSize = document.createElement(\"p\");\r\n        convertedFileSize.innerText = convertedDataSize.innerText;\r\n        convertedFileSize.classList.add(\"data-wrapper\");\r\n        fileWrapperRow.appendChild(convertedFileSize);\r\n\r\n        // *Create a Comparison Button\r\n        const popup = document.getElementById(\"popup-card\");\r\n        const comparisonButton = document.createElement(\"button\");\r\n        comparisonButton.classList.add(\"compare-button\");\r\n\r\n        const comparisonButtonContainer = document.createElement(\"a\");\r\n        comparisonButtonContainer.classList.add(\"compare-button\");\r\n\r\n        const comparisonButtonIcon = document.createElement(\"i\");\r\n        comparisonButtonIcon.classList.add(\"fas\", \"fa-info-circle\");\r\n        comparisonButtonIcon.dataset.index = i; // Set data-index attribute directly\r\n\r\n        comparisonButtonContainer.appendChild(comparisonButtonIcon);\r\n\r\n        comparisonButtonIcon.addEventListener(\"click\", (e) => {\r\n          const imagesContainer = document.getElementById(\"image-container\");\r\n          const beforeImage = imagesContainer.querySelector(\".image-before\");\r\n          const afterImage = imagesContainer.querySelector(\".image-after\");\r\n\r\n          if (beforeImage && afterImage) {\r\n            imagesContainer.removeChild(beforeImage);\r\n            imagesContainer.removeChild(afterImage);\r\n          } else {\r\n            // Use e.target to get the element that triggered the event\r\n            const dataIndex = e.target.dataset.index; // Access the data-index directly\r\n\r\n            const originalImageElement = document.createElement(\"img\");\r\n            originalImageElement.classList.add(\"image-before\");\r\n            originalImageElement.alt = \"original image\";\r\n            originalImageElement.src = URL.createObjectURL(\r\n              matchedArray[dataIndex].originalBlob\r\n            );\r\n\r\n            imagesContainer.appendChild(originalImageElement);\r\n\r\n            const convertedImageElement = document.createElement(\"img\");\r\n            convertedImageElement.classList.add(\"image-after\");\r\n            convertedImageElement.alt = \"converted image\";\r\n            convertedImageElement.src = data;\r\n            imagesContainer.appendChild(convertedImageElement);\r\n\r\n            // !Remove previously generated elements if they exist\r\n            const prevComparisonRangeSliders =\r\n              imagesContainer.querySelectorAll(\".comparison-slider\");\r\n            const prevSliderLines =\r\n              imagesContainer.querySelectorAll(\".slider-line\");\r\n            const prevSliderButtons =\r\n              imagesContainer.querySelectorAll(\".slider-button\");\r\n\r\n            prevComparisonRangeSliders.forEach((slider) =>\r\n              slider.parentNode.removeChild(slider)\r\n            );\r\n            prevSliderLines.forEach((line) =>\r\n              line.parentNode.removeChild(line)\r\n            );\r\n            prevSliderButtons.forEach((button) =>\r\n              button.parentNode.removeChild(button)\r\n            );\r\n\r\n            const comparisonRangeSlider = document.createElement(\"input\");\r\n            comparisonRangeSlider.type = \"range\";\r\n            comparisonRangeSlider.min = \"0\";\r\n            comparisonRangeSlider.max = \"100\";\r\n            comparisonRangeSlider.value = \"50%\";\r\n            comparisonRangeSlider.classList.add(\"comparison-slider\");\r\n            comparisonRangeSlider.setAttribute(\r\n              \"aria-label\",\r\n              \"Percentage of before photo shown\"\r\n            );\r\n            imagesContainer.appendChild(comparisonRangeSlider);\r\n\r\n            const sliderLine = document.createElement(\"div\");\r\n            sliderLine.classList.add(\"slider-line\");\r\n            imagesContainer.appendChild(sliderLine);\r\n\r\n            const sliderButton = document.createElement(\"div\");\r\n            sliderButton.classList.add(\r\n              \"slider-button\",\r\n              \"fas\",\r\n              \"fa-arrows-alt-h\"\r\n            );\r\n            imagesContainer.appendChild(sliderButton);\r\n\r\n            // !Slider Functionality\r\n            const Container = document.querySelector(\"#image-container\");\r\n\r\n            const comparisonSliders =\r\n              document.querySelectorAll(\".comparison-slider\");\r\n\r\n            comparisonSliders.forEach((comparisonSlider) => {\r\n              comparisonSlider.addEventListener(\"input\", (e) => {\r\n                Container.style.setProperty(\"--position\", `${e.target.value}%`);\r\n              });\r\n            });\r\n\r\n            popup.classList.remove(\"hide\");\r\n            popup.classList.add(\"show\");\r\n\r\n            // !Popup Card\r\n            closeButton.addEventListener(\"click\", () => {\r\n              PopupCard.classList.remove(\"show\");\r\n              PopupCard.classList.add(\"hide\");\r\n\r\n              comparisonSliders.forEach((comparisonSlider) => {\r\n                comparisonSlider.value = 50;\r\n              });\r\n            });\r\n          }\r\n        });\r\n        fileWrapperRow.appendChild(comparisonButtonContainer);\r\n\r\n        // *Create a button for individual download\r\n        const downloadButtonContainer = document.createElement(\"div\");\r\n        downloadButtonContainer.classList.add(\"single-download\");\r\n        const downloadButtonIcon = document.createElement(\"i\");\r\n        // downloadButton.innerText = 'Download';\r\n        downloadButtonIcon.classList.add(\"fas\", \"fa-download\");\r\n\r\n        downloadButtonContainer.addEventListener(\"click\", function () {\r\n          downloadWebpImage(data, name);\r\n        });\r\n        downloadButtonContainer.appendChild(downloadButtonIcon);\r\n        fileWrapperRow.appendChild(downloadButtonContainer);\r\n\r\n        // *Add the image content to the streamline container\r\n        streamlineContainer.appendChild(fileWrapper);\r\n        streamlineContainer.appendChild(fileWrapperRow);\r\n\r\n        const endTimeRendering = performance.now();\r\n        const processingTimeRendering = endTimeRendering - startTimeRendering;\r\n        console.log(\"Rendering time:\", processingTimeRendering);\r\n      } else {\r\n        console.log(\r\n          `Skipping rendering for image ${i} due to missing elements`\r\n        );\r\n        // *Hide slider after conversion\r\n      }\r\n    }\r\n    const sliderWrapper = document.querySelector(\".slider-wrapper\");\r\n    sliderWrapper.style.display = \"none\";\r\n  }\r\n\r\n  async function downloadWebpImage(dataURI, filename) {\r\n    try {\r\n      const response = await fetch(dataURI);\r\n      const blob = await response.blob();\r\n      const url = URL.createObjectURL(blob);\r\n\r\n      const downloadLink = document.createElement(\"a\");\r\n      downloadLink.href = url;\r\n      downloadLink.download = filename.replace(/\\.[^/.]+$/, \"\") + \".webp\"; // *Remove the file extension and add .webp\r\n      downloadLink.click();\r\n    } catch (error) {\r\n      console.error(\"Error downloading image\", error);\r\n    }\r\n  }\r\n\r\n  const downloadImages = function () {\r\n    if (webpImages.length > 0) {\r\n      if (downloadButtonSingle.style.display === \"block\") {\r\n        // *Download single file\r\n        const { name, data } = webpImages[0];\r\n        const fileName = getWebpFilename(name);\r\n        const downloadLink = document.createElement(\"a\");\r\n        downloadLink.href = data;\r\n        downloadLink.download = fileName;\r\n        downloadLink.click();\r\n      } else {\r\n        const zip = new JSZip();\r\n\r\n        for (let i = 0; i < webpImages.length; i++) {\r\n          const { name, data } = webpImages[i];\r\n          const fileName = getWebpFilename(name); // *Use the original filename for the WebP file\r\n\r\n          zip.file(fileName, data.split(\",\")[1], { base64: true });\r\n        }\r\n\r\n        zip.generateAsync({ type: \"blob\" }).then(function (content) {\r\n          const downloadLink = document.createElement(\"a\");\r\n          downloadLink.href = URL.createObjectURL(content);\r\n          downloadLink.download = \"webp_images.zip\";\r\n          downloadLink.click();\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  inputElement.addEventListener(\"change\", convertImages);\r\n  downloadButtonSingle.addEventListener(\"click\", downloadImages);\r\n  downloadButtonMultiple.addEventListener(\"click\", downloadImages);\r\n});\r\n\n\n//# sourceURL=webpack://Template/./src/js/bundle.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/bundle.js");
/******/ 	
/******/ })()
;